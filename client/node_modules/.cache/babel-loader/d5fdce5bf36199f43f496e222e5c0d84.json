{"ast":null,"code":"var _jsxFileName = \"/Users/thuongle/Desktop/e-ecommerce/client/src/components/booking-content/booking-content.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Layout, Table, Skeleton, Popconfirm, message, Button } from 'antd';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from '../../redux/user/user.selector';\nimport { getBookingStart, updateCompleteStart } from '../../redux/booking/booking-action';\nimport { selectHistoryBooking, selectIsLoadingBOOKING } from '../../redux/booking/booking-selector';\nconst {\n  Content\n} = Layout;\n\nclass BookingContent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      columnsPrefix: [{\n        title: 'Date',\n        dataIndex: 'createAt',\n        sorter: (a, b) => a.date - b.date,\n        width: 100,\n        fixed: 'left',\n\n        render(_, row) {\n          return {\n            children: row.createAt,\n            props: {\n              rowSpan: row.rowSpan\n            }\n          };\n        }\n\n      }, {\n        title: 'Name',\n        dataIndex: 'name',\n        width: 150,\n        fixed: 'left',\n\n        render(_, row) {\n          return {\n            children: row.name,\n            props: {\n              rowSpan: row.rowSpan\n            }\n          };\n        }\n\n      }, {\n        title: 'Phone Customer',\n        dataIndex: 'phoneNumber',\n        ellipsis: true,\n        width: 150,\n\n        render(_, row) {\n          return {\n            children: row.phoneNumber,\n            props: {\n              rowSpan: row.rowSpan\n            }\n          };\n        }\n\n      }, {\n        title: 'Address Ship',\n        dataIndex: 'address',\n        ellipsis: true,\n        width: 150\n      }, {\n        title: 'BOX_NO',\n        dataIndex: 'boxNo',\n        width: 150,\n        render: () => /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }\n        }, \"BOX NO\")\n      }, {\n        title: 'PACKAGE_QTY',\n        dataIndex: 'quantity',\n        ellipsis: true,\n        width: 150\n      }, {\n        title: 'ORDER_ITEM',\n        dataIndex: 'idProduct',\n        ellipsis: true,\n        width: 150\n      }, {\n        title: 'ITEM_DESCRIPTION_EN',\n        dataIndex: 'nameEN',\n        ellipsis: true,\n        width: 200\n      }, {\n        title: 'ITEM_DESCRIPTION',\n        dataIndex: 'nameVN',\n        ellipsis: true,\n        width: 600\n      }, {\n        title: 'ORDER_QUANTITY',\n        dataIndex: 'quantity',\n        ellipsis: true,\n        width: 150\n      }, {\n        title: 'UOM',\n        dataIndex: 'uom',\n        width: 150\n      }, {\n        title: 'ORDER_NET_WEIGHT',\n        dataIndex: 'weight',\n        ellipsis: true,\n        width: 250\n      }, {\n        title: 'ORDER_GROSS_WEIGHT',\n        dataIndex: 'totalWeight',\n        ellipsis: true,\n        width: 250\n      }, {\n        title: 'ITEM_FACTORY_COUNTRY',\n        dataIndex: 'origin',\n        ellipsis: true,\n        width: 250\n      }, {\n        title: 'AMOUNT',\n        dataIndex: 'priceUSD',\n        width: 150\n      }, {\n        title: 'ORDER_CURR_CODE',\n        dataIndex: 'orderCurrCode',\n        ellipsis: true,\n        width: 200\n      }, {\n        title: 'SHIP_FROM_PORT',\n        dataIndex: 'shipFormPort',\n        ellipsis: true,\n        width: 200\n      }, {\n        title: \"isComplete\",\n        dataIndex: \"isComplete\",\n        key: \"delete\",\n        ellipsis: true,\n        width: 150,\n        fixed: 'right',\n        render: (text, record) => {\n          if (record.isCompleted) {\n            return /*#__PURE__*/React.createElement(\"h2\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 19\n              }\n            }, \"Done\");\n          } else {\n            return /*#__PURE__*/React.createElement(Popconfirm, {\n              title: \"Are you sure Is Complete ?\",\n              okText: \"Yes\",\n              cancelText: \"No\",\n              onCancel: () => message.error('U click on No'),\n              onConfirm: () => this.handleComplete({\n                key: record.key,\n                id: record._id\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 15\n              }\n            }, /*#__PURE__*/React.createElement(Button, {\n              type: \"primary\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 17\n              }\n            }, \"Complete\"));\n          }\n        }\n      }]\n    };\n\n    this.createNewArr = data => {\n      return data.reduce((result, item) => {\n        //First, take the name field as a new array result\n        if (result.indexOf(item.name) < 0) {\n          result.push(item.name);\n        }\n\n        return result;\n      }, []).reduce((result, name) => {\n        //Take the data with the same name as a new array, and add a new field * * rowSpan inside it**\n        const children = data.filter(item => item.name === name);\n        result = result.concat(children.map((item, index) => ({ ...item,\n          rowSpan: index === 0 ? children.length : 0 //Add the first row of data to the rowSpan field\n\n        })));\n        return result;\n      }, []);\n    };\n\n    this.handleComplete = key => {\n      const {\n        updateCompleteStart\n      } = this.props;\n      updateCompleteStart(key);\n    };\n  }\n\n  componentDidMount() {\n    const {\n      currentUser,\n      getBookingStart\n    } = this.props;\n    const {\n      columnsPrefix\n    } = this.state;\n\n    if (!currentUser.roles.includes(\"admin\")) {\n      let newState = columnsPrefix.filter(el => el.title !== 'isComplete');\n      this.setState({\n        columnsPrefix: newState\n      });\n    }\n\n    getBookingStart();\n  }\n\n  render() {\n    const {\n      columnsPrefix\n    } = this.state;\n    const {\n      historyBooking,\n      isLoading\n    } = this.props;\n\n    if (!isLoading) {\n      return /*#__PURE__*/React.createElement(Layout, {\n        style: {\n          padding: '0 24px 24px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Content, {\n        style: {\n          padding: 24,\n          margin: 0,\n          minHeight: 600\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Table, {\n        pagination: false,\n        tableLayout: \"fixed\",\n        rowSelection: {\n          type: 'radio',\n          getCheckboxProps: record => ({\n            disabled: record.isCompleted === true,\n            // Column configuration not to be checked\n            name: record.name\n          })\n        },\n        scroll: {\n          x: 2000\n        },\n        title: () => 'Booking Pages',\n        dataSource: this.createNewArr(historyBooking),\n        columns: columnsPrefix,\n        rowKey: \"key\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 15\n        }\n      }))));\n    } else {\n      return /*#__PURE__*/React.createElement(Skeleton, {\n        paragraph: {\n          rows: 6\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 9\n        }\n      });\n    }\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  historyBooking: selectHistoryBooking,\n  isLoading: selectIsLoadingBOOKING\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getBookingStart: () => dispatch(getBookingStart()),\n  updateCompleteStart: key => dispatch(updateCompleteStart(key))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BookingContent);","map":{"version":3,"sources":["/Users/thuongle/Desktop/e-ecommerce/client/src/components/booking-content/booking-content.component.jsx"],"names":["React","connect","Layout","Table","Skeleton","Popconfirm","message","Button","createStructuredSelector","selectCurrentUser","getBookingStart","updateCompleteStart","selectHistoryBooking","selectIsLoadingBOOKING","Content","BookingContent","Component","state","columnsPrefix","title","dataIndex","sorter","a","b","date","width","fixed","render","_","row","children","createAt","props","rowSpan","name","ellipsis","phoneNumber","key","text","record","isCompleted","error","handleComplete","id","_id","createNewArr","data","reduce","result","item","indexOf","push","filter","concat","map","index","length","componentDidMount","currentUser","roles","includes","newState","el","setState","historyBooking","isLoading","padding","margin","minHeight","type","getCheckboxProps","disabled","x","rows","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport { Layout, Table,Skeleton,Popconfirm,message,Button } from 'antd';\n\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from '../../redux/user/user.selector';\nimport { getBookingStart, updateCompleteStart } from '../../redux/booking/booking-action';\nimport { selectHistoryBooking, selectIsLoadingBOOKING } from '../../redux/booking/booking-selector';\n\nconst { Content } = Layout;\n\n\n\nclass BookingContent extends React.Component {\n  state = {\n    columnsPrefix : [\n      {\n        title: 'Date',\n        dataIndex: 'createAt',\n        sorter: (a, b) => a.date - b.date,\n        width: 100,\n        fixed: 'left',\n        render(_, row) {\n          return {\n            children: row.createAt,\n            props: {\n              rowSpan: row.rowSpan,\n            }\n          }\n        }\n      },\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        width: 150,\n        fixed: 'left',\n        render(_, row) {\n          return {\n            children: row.name,\n            props: {\n              rowSpan: row.rowSpan,\n            }\n          }\n        }\n      },\n      {\n        title: 'Phone Customer',\n        dataIndex: 'phoneNumber',\n        ellipsis: true,\n        width: 150,\n        render(_, row) {\n          return {\n            children: row.phoneNumber,\n            props: {\n              rowSpan: row.rowSpan,\n            }\n          }\n        }\n      },\n      {\n        title: 'Address Ship',\n        dataIndex: 'address',\n        ellipsis: true,\n        width: 150,\n      },\n      {\n        title: 'BOX_NO',\n        dataIndex: 'boxNo',\n        width: 150,\n        render: () => (\n          <p>BOX NO</p>\n        )\n      },\n      {\n        title: 'PACKAGE_QTY',\n        dataIndex: 'quantity',\n        ellipsis: true,\n        width: 150,\n      },\n      {\n        title: 'ORDER_ITEM',\n        dataIndex: 'idProduct',\n        ellipsis: true,\n        width: 150,\n      },\n      {\n        title: 'ITEM_DESCRIPTION_EN',\n        dataIndex: 'nameEN',\n        ellipsis: true,\n        width: 200,\n      },\n      {\n        title: 'ITEM_DESCRIPTION',\n        dataIndex: 'nameVN',\n        ellipsis: true,\n        width: 600  ,\n      },\n      {\n        title: 'ORDER_QUANTITY',\n        dataIndex: 'quantity',\n        ellipsis: true,\n        width: 150,\n      },\n      {\n        title: 'UOM',\n        dataIndex: 'uom',\n        width: 150,\n      },\n      {\n        title: 'ORDER_NET_WEIGHT',\n        dataIndex: 'weight',\n        ellipsis: true,\n        width: 250,\n      },\n      {\n        title: 'ORDER_GROSS_WEIGHT',\n        dataIndex: 'totalWeight',\n        ellipsis: true,\n        width: 250,\n      },\n      {\n        title: 'ITEM_FACTORY_COUNTRY',\n        dataIndex: 'origin',\n        ellipsis: true,\n        width: 250,\n      },\n      {\n        title: 'AMOUNT',\n        dataIndex: 'priceUSD',\n        width: 150,\n      },\n      {\n        title: 'ORDER_CURR_CODE',\n        dataIndex: 'orderCurrCode',\n        ellipsis: true,\n        width: 200,\n      },\n      {\n        title: 'SHIP_FROM_PORT',\n        dataIndex: 'shipFormPort',\n        ellipsis: true,\n        width: 200,\n      },\n      {\n        title: \"isComplete\",\n        dataIndex: \"isComplete\",\n        key: \"delete\",\n        ellipsis: true,\n        width: 150,\n        fixed: 'right',\n        render: (text,record) => {\n          if(record.isCompleted) {\n           return <h2>Done</h2>\n          }else {\n            return(\n              <Popconfirm\n              title=\"Are you sure Is Complete ?\"\n              okText=\"Yes\"\n              cancelText=\"No\"\n              onCancel  = { () => message.error('U click on No')}\n              onConfirm = {() => this.handleComplete({key:record.key,id:record._id})}\n            >\n                <Button type=\"primary\">Complete</Button>\n              </Popconfirm>\n            )}\n          }\n      }\n    ]\n  }\n  createNewArr = (data) =>{\n    return data.reduce((result, item) => {\n    //First, take the name field as a new array result\n        if (result.indexOf(item.name) < 0) {\n            result.push(item.name)\n        }\n        return result\n    }, []).reduce((result, name) => {\n    //Take the data with the same name as a new array, and add a new field * * rowSpan inside it**\n      const children = data.filter(item => item.name === name);\n      result = result.concat(\n        children.map((item, index) => ({\n          ...item,\n          rowSpan: index === 0 ? children.length : 0,//Add the first row of data to the rowSpan field\n        }))\n      )\n      return result;\n    }, [])\n  }\n  handleComplete = key => {\n    const {updateCompleteStart} = this.props;\n    updateCompleteStart(key)\n  }\n  componentDidMount() {\n    const {currentUser,getBookingStart} = this.props;\n    const {columnsPrefix} = this.state;\n    if(!currentUser.roles.includes(\"admin\")) {\n      let newState = columnsPrefix.filter(el => el.title !== 'isComplete');\n      this.setState({\n        columnsPrefix : newState\n      }) \n    }\n    getBookingStart();  \n  }\n\n\n  render() {\n    const {columnsPrefix} = this.state;\n    const {historyBooking,isLoading} = this.props;\n    if(!isLoading)  {\n      return (\n        <Layout style={{ padding: '0 24px 24px' }}>\n          <Content style={{\n            padding: 24,\n            margin: 0,\n            minHeight: 600,\n          }}\n          >\n            <div>\n              <Table\n                pagination={false}\n                tableLayout=\"fixed\"\n                rowSelection={{\n                  type:'radio',\n                  getCheckboxProps: record => ({\n                    disabled: record.isCompleted === true,\n                    // Column configuration not to be checked\n                    name: record.name,\n                  }),\n                }}\n                \n                scroll={{ x: 2000 }}\n                title={() => 'Booking Pages'}\n                dataSource={this.createNewArr(historyBooking)}\n                columns={columnsPrefix}\n                rowKey='key'\n              /> \n            </div>\n          </Content>\n        </Layout>\n      )\n    }\n    else {\n      return (\n        <Skeleton paragraph={{ rows: 6 }}/>\n      )\n    }\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser : selectCurrentUser,\n  historyBooking : selectHistoryBooking,\n  isLoading : selectIsLoadingBOOKING\n})\n\nconst mapDispatchToProps = dispatch => ({\n  getBookingStart: () => dispatch(getBookingStart()),\n  updateCompleteStart: (key)=> dispatch(updateCompleteStart(key))\n})\nexport default connect( mapStateToProps,mapDispatchToProps)(BookingContent);\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}