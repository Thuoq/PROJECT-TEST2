{"ast":null,"code":"var _jsxFileName = \"/Users/thuongle/Desktop/e-ecommerce/client/src/components/booking-content/booking-content.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Layout, Table, Skeleton } from 'antd';\nimport COLUMNS from './column-content';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from '../../redux/user/user.selector';\nimport { getBookingStart } from '../../redux/booking/booking-action';\nimport { selectHistoryBooking, selectIsLoadingBOOKING } from '../../redux/booking/booking-selector';\nconst {\n  Content\n} = Layout;\n\nclass BookingContent extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      columnsPrefix: []\n    };\n\n    this.handleChange = (selectedRowKeys, selectedRows) => {\n      console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\n    };\n  }\n\n  componentDidMount() {\n    const {\n      currentUser,\n      getBookingStart\n    } = this.props;\n\n    if (!currentUser.roles.includes(\"admin\")) {\n      let newState = COLUMNS.filter(el => el.title !== 'isComplete');\n      this.setState({\n        columnsPrefix: newState\n      });\n    } else {\n      this.setState({\n        columnsPrefix: COLUMNS\n      });\n    }\n\n    getBookingStart();\n  }\n\n  render() {\n    const {\n      columnsPrefix\n    } = this.state;\n    const {\n      historyBooking,\n      isLoading\n    } = this.props;\n\n    if (!isLoading) {\n      return /*#__PURE__*/React.createElement(Layout, {\n        style: {\n          padding: '0 24px 24px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Content, {\n        style: {\n          padding: 24,\n          margin: 0,\n          minHeight: 600\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Table, {\n        pagination: false,\n        tableLayout: \"fixed\",\n        rowSelection: {\n          type: 'radio'\n        },\n        onChange: this.handleChange,\n        scroll: {\n          x: 2000\n        },\n        title: () => 'Booking Pages',\n        dataSource: historyBooking,\n        columns: columnsPrefix,\n        rowKey: \"key\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }\n      }))));\n    } else {\n      return /*#__PURE__*/React.createElement(Skeleton, {\n        paragraph: {\n          rows: 6\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }\n      });\n    }\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser,\n  historyBooking: selectHistoryBooking,\n  isLoading: selectIsLoadingBOOKING\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getBookingStart: () => dispatch(getBookingStart())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BookingContent);","map":{"version":3,"sources":["/Users/thuongle/Desktop/e-ecommerce/client/src/components/booking-content/booking-content.component.jsx"],"names":["React","connect","Layout","Table","Skeleton","COLUMNS","createStructuredSelector","selectCurrentUser","getBookingStart","selectHistoryBooking","selectIsLoadingBOOKING","Content","BookingContent","Component","state","columnsPrefix","handleChange","selectedRowKeys","selectedRows","console","log","componentDidMount","currentUser","props","roles","includes","newState","filter","el","title","setState","render","historyBooking","isLoading","padding","margin","minHeight","type","x","rows","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport { Layout, Table,Skeleton } from 'antd';\nimport COLUMNS from './column-content';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCurrentUser } from '../../redux/user/user.selector';\nimport { getBookingStart } from '../../redux/booking/booking-action';\nimport { selectHistoryBooking, selectIsLoadingBOOKING } from '../../redux/booking/booking-selector';\n\nconst { Content } = Layout;\n\n\n\nclass BookingContent extends React.Component {\n  state = {\n    columnsPrefix : [],\n  }\n  componentDidMount() {\n    const {currentUser,getBookingStart} = this.props;\n    if(!currentUser.roles.includes(\"admin\") ) {\n      let newState = COLUMNS.filter(el => el.title !== 'isComplete');\n      this.setState({\n        columnsPrefix : newState\n      }) \n    } else {\n      this.setState({\n        columnsPrefix : COLUMNS\n      })   \n    }\n    getBookingStart();  \n  }\n  handleChange = (selectedRowKeys ,selectedRows ) => {\n    console.log(\n      `selectedRowKeys: ${selectedRowKeys}`,\n      'selectedRows: ',\n      selectedRows,\n    );\n  }\n\n\n\n  render() {\n    const {columnsPrefix} = this.state;\n    const {historyBooking,isLoading} = this.props;\n    if(!isLoading)  {\n      return (\n        <Layout style={{ padding: '0 24px 24px' }}>\n          <Content style={{\n            padding: 24,\n            margin: 0,\n            minHeight: 600,\n          }}\n          >\n            <div>\n              <Table\n                pagination={false}\n                tableLayout=\"fixed\"\n                rowSelection={{\n                  type:'radio'\n                }}\n                onChange = {this.handleChange}\n                scroll={{ x: 2000 }}\n                title={() => 'Booking Pages'}\n                dataSource={historyBooking}\n                columns={columnsPrefix}\n                rowKey='key'\n              /> \n            </div>\n          </Content>\n        </Layout>\n      )\n    }\n    else {\n      return (\n        <Skeleton paragraph={{ rows: 6 }}/>\n      )\n    }\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser : selectCurrentUser,\n  historyBooking : selectHistoryBooking,\n  isLoading : selectIsLoadingBOOKING\n})\n\nconst mapDispatchToProps = dispatch => ({\n  getBookingStart: () => dispatch(getBookingStart())\n})\nexport default connect( mapStateToProps,mapDispatchToProps)(BookingContent);\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}